generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(uuid()) @map("_id")
  name       String?  @unique
  email      String   @unique
  password   String
  isVerified Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  posts    Post[]
  token    Token[]
  comments Comment[]
}

model Post {
  id        String   @id @default(uuid()) @map("_id")
  title     String
  content   String
  slug      String   @unique
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author   User      @relation(fields: [authorId], references: [id])
  comments Comment[]
  tags     PostTag[]
}

model Tag {
  id   String @id @default(uuid()) @map("_id")
  name String @unique

  posts PostTag[]
}

model PostTag {
  id     String @id @default(uuid()) @map("_id")
  postId String
  tagId  String

  post Post @relation(fields: [postId], references: [id])
  tag  Tag  @relation(fields: [tagId], references: [id])
}

model Comment {
  id        String   @id @default(uuid()) @map("_id")
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  postId String
  post   Post    @relation(fields: [postId], references: [id])
  user   User?   @relation(fields: [userId], references: [id])
  userId String?
}

model Otp {
  id        String    @id @default(uuid()) @map("_id")
  email     String    @db.String
  otp       String    @db.String
  expireAt  DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("Otp")
}

model Token {
  id           String @id @default(uuid()) @map("_id")
  userId       String @unique
  refreshToken String
  user         User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}
